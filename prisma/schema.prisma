generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  videos        Video[]
  viewerSubscriptions  Subscription[] @relation("ViewerSubscriptions")
  creatorSubscribers   Subscription[] @relation("CreatorSubscribers")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String   @id @default(uuid()) // Automatically generate the UUID
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videos      Video[]

  @@map("category")
}

// Enum definition
enum VideoVisibility {
  private
  public
}

model Video {
  id             String          @id @default(uuid()) // Automatically generate the UUID
  title          String
  description    String?
  muxStatus      String?
  muxAssetId     String?         @unique
  muxUploadId    String?         @unique
  muxPlaybackId  String?         @unique
  muxTrackId     String?         @unique
  muxTrackStatus String?
  thumbnailUrl   String?
  thumbnailKey   String?
  previewUrl     String?
  previewKey     String?
  duration       Int             @default(0) // Duration in seconds
  visibility     VideoVisibility @default(private) // Enum used here
  userId         String
  categoryId     String?

  videoViews Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("video") // The table name in the database
}

model Subscription {
  viewerId  String
  creatorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  viewer   User @relation("ViewerSubscriptions", fields: [viewerId], references: [id], onDelete: Cascade)
  creator  User @relation("CreatorSubscribers", fields: [creatorId], references: [id], onDelete: Cascade)

  @@id([viewerId, creatorId]) // Composite primary key
  @@map("subscription")
}
